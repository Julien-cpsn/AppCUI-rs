use crate::prelude::*;

#[test]
fn check_from_for_keycode() {
    assert_eq!(KeyCode::from(0),KeyCode::None);
    assert_eq!(KeyCode::from(1),KeyCode::F1);
    assert_eq!(KeyCode::from(2),KeyCode::F2);
    assert_eq!(KeyCode::from(3),KeyCode::F3);
    assert_eq!(KeyCode::from(4),KeyCode::F4);
    assert_eq!(KeyCode::from(5),KeyCode::F5);
    assert_eq!(KeyCode::from(6),KeyCode::F6);
    assert_eq!(KeyCode::from(7),KeyCode::F7);
    assert_eq!(KeyCode::from(8),KeyCode::F8);
    assert_eq!(KeyCode::from(9),KeyCode::F9);
    assert_eq!(KeyCode::from(10),KeyCode::F10);
    assert_eq!(KeyCode::from(11),KeyCode::F11);
    assert_eq!(KeyCode::from(12),KeyCode::F12);
    assert_eq!(KeyCode::from(13),KeyCode::Enter);
    assert_eq!(KeyCode::from(14),KeyCode::Escape);
    assert_eq!(KeyCode::from(15),KeyCode::Insert);
    assert_eq!(KeyCode::from(16),KeyCode::Delete);
    assert_eq!(KeyCode::from(17),KeyCode::Backspace);
    assert_eq!(KeyCode::from(18),KeyCode::Tab);
    assert_eq!(KeyCode::from(19),KeyCode::Left);
    assert_eq!(KeyCode::from(20),KeyCode::Up);
    assert_eq!(KeyCode::from(21),KeyCode::Down);
    assert_eq!(KeyCode::from(22),KeyCode::Right);
    assert_eq!(KeyCode::from(23),KeyCode::PageUp);
    assert_eq!(KeyCode::from(24),KeyCode::PageDown);
    assert_eq!(KeyCode::from(25),KeyCode::Home);
    assert_eq!(KeyCode::from(26),KeyCode::End);
    assert_eq!(KeyCode::from(27),KeyCode::Space);
    assert_eq!(KeyCode::from(28),KeyCode::A);
    assert_eq!(KeyCode::from(29),KeyCode::B);
    assert_eq!(KeyCode::from(30),KeyCode::C);
    assert_eq!(KeyCode::from(31),KeyCode::D);
    assert_eq!(KeyCode::from(32),KeyCode::E);
    assert_eq!(KeyCode::from(33),KeyCode::F);
    assert_eq!(KeyCode::from(34),KeyCode::G);
    assert_eq!(KeyCode::from(35),KeyCode::H);
    assert_eq!(KeyCode::from(36),KeyCode::I);
    assert_eq!(KeyCode::from(37),KeyCode::J);
    assert_eq!(KeyCode::from(38),KeyCode::K);
    assert_eq!(KeyCode::from(39),KeyCode::L);
    assert_eq!(KeyCode::from(40),KeyCode::M);
    assert_eq!(KeyCode::from(41),KeyCode::N);
    assert_eq!(KeyCode::from(42),KeyCode::O);
    assert_eq!(KeyCode::from(43),KeyCode::P);
    assert_eq!(KeyCode::from(44),KeyCode::Q);
    assert_eq!(KeyCode::from(45),KeyCode::R);
    assert_eq!(KeyCode::from(46),KeyCode::S);
    assert_eq!(KeyCode::from(47),KeyCode::T);
    assert_eq!(KeyCode::from(48),KeyCode::U);
    assert_eq!(KeyCode::from(49),KeyCode::V);
    assert_eq!(KeyCode::from(50),KeyCode::W);
    assert_eq!(KeyCode::from(51),KeyCode::X);
    assert_eq!(KeyCode::from(52),KeyCode::Y);
    assert_eq!(KeyCode::from(53),KeyCode::Z);
    assert_eq!(KeyCode::from(54),KeyCode::N0);
    assert_eq!(KeyCode::from(55),KeyCode::N1);
    assert_eq!(KeyCode::from(56),KeyCode::N2);
    assert_eq!(KeyCode::from(57),KeyCode::N3);
    assert_eq!(KeyCode::from(58),KeyCode::N4);
    assert_eq!(KeyCode::from(59),KeyCode::N5);
    assert_eq!(KeyCode::from(60),KeyCode::N6);
    assert_eq!(KeyCode::from(61),KeyCode::N7);
    assert_eq!(KeyCode::from(62),KeyCode::N8);
    assert_eq!(KeyCode::from(63),KeyCode::N9);
    for i in 64..255 {
        assert_eq!(KeyCode::from(i),KeyCode::None);
    }
}