use crate::backend::utils::{AnsiFlags, AnsiFormatter};
use crate::graphics::Color;

#[test]
fn check_ansi_methods() {
    let mut a = AnsiFormatter::new(128, AnsiFlags::None);
    a.enable_mouse_events();
    assert_eq!(a.text(),"\x1b[?1003h");
    a.clear();
    a.disable_mouse_events();
    assert_eq!(a.text(),"\x1b[?1003l");
    a.clear();
    a.write_char('a');
    assert_eq!(a.text(),"a");
    a.clear();
    a.write_string("Hello");
    assert_eq!(a.text(),"Hello");
    a.clear();
    a.set_foreground_color(Color::Red);
    assert_eq!(a.text(),"\x1b[38;2;255;0;0m");
    a.clear();
    a.set_background_color(Color::Blue);
    assert_eq!(a.text(),"\x1b[48;2;0;0;255m");
    a.clear();
    a.set_foreground_color(Color::Green);
    assert_eq!(a.text(),"\x1b[38;2;0;255;0m");
    a.clear();
    a.set_background_color(Color::Yellow);
    assert_eq!(a.text(),"\x1b[48;2;255;255;0m");
    a.clear();
    a.set_foreground_color(Color::Magenta);
    assert_eq!(a.text(),"\x1b[38;2;128;0;128m");
    a.clear();
    a.set_foreground_color(Color::White);
    assert_eq!(a.text(),"\x1b[38;2;255;255;255m");
    a.clear();
    a.set_background_color(Color::Black);
    assert_eq!(a.text(),"\x1b[48;2;0;0;0m");
    a.clear();
    a.set_foreground_color(Color::Gray);
    assert_eq!(a.text(),"\x1b[38;2;128;128;128m");
    a.clear();
    a.set_background_color(Color::Silver);
    assert_eq!(a.text(),"\x1b[48;2;196;196;196m");
    a.clear();
    a.set_foreground_color(Color::DarkRed);
    assert_eq!(a.text(),"\x1b[38;2;128;0;0m");
    a.clear();
    a.set_background_color(Color::DarkBlue);
    assert_eq!(a.text(),"\x1b[48;2;0;0;128m");
    a.clear();
    a.set_foreground_color(Color::DarkGreen);
    assert_eq!(a.text(),"\x1b[38;2;0;128;0m");
    a.clear();
    a.set_background_color(Color::Teal);
    assert_eq!(a.text(),"\x1b[48;2;0;128;128m");
    a.clear();
    a.set_foreground_color(Color::Olive);
    assert_eq!(a.text(),"\x1b[38;2;128;128;0m");
    a.clear();
    a.set_background_color(Color::Pink);
    assert_eq!(a.text(),"\x1b[48;2;255;0;255m");
    a.clear();
    a.set_foreground_color(Color::Aqua);
    assert_eq!(a.text(),"\x1b[38;2;0;255;255m");
    a.clear();
    a.set_background_color(Color::DarkRed);
    assert_eq!(a.text(),"\x1b[48;2;128;0;0m");
    a.clear();
    a.set_foreground_color(Color::DarkBlue);
    assert_eq!(a.text(),"\x1b[38;2;0;0;128m");
    a.clear();
    a.set_background_color(Color::DarkGreen);
    assert_eq!(a.text(),"\x1b[48;2;0;128;0m");
    a.clear();
    a.set_foreground_color(Color::Teal);
    assert_eq!(a.text(),"\x1b[38;2;0;128;128m");
    a.clear();
    a.set_background_color(Color::Olive);
    assert_eq!(a.text(),"\x1b[48;2;128;128;0m");
    a.clear();
    a.set_foreground_color(Color::Red);
    a.set_background_color(Color::Blue);
    assert_eq!(a.text(),"\x1b[38;2;255;0;0m\x1b[48;2;0;0;255m");
    a.clear();
    a.set_foreground_color(Color::Green);
    a.set_background_color(Color::Yellow);
    assert_eq!(a.text(),"\x1b[38;2;0;255;0m\x1b[48;2;255;255;0m");
    a.clear();
    a.set_foreground_color(Color::Magenta);
    a.set_background_color(Color::Aqua);
    assert_eq!(a.text(),"\x1b[38;2;128;0;128m\x1b[48;2;0;255;255m");
    a.clear();
    a.set_foreground_color(Color::White);
    a.set_background_color(Color::Black);
    assert_eq!(a.text(),"\x1b[38;2;255;255;255m\x1b[48;2;0;0;0m");
}

#[test]
fn check_ansi_cursor_methods() {
    let mut a = AnsiFormatter::new(128, AnsiFlags::None);
    a.hide_cursor();
    assert_eq!(a.text(),"\x1b[?25l");
    a.clear();
    a.show_cursor();
    assert_eq!(a.text(),"\x1b[?25h");
    a.clear();
    a.set_cursor_position(1,1);
    assert_eq!(a.text(),"\x1b[2;2H");
    a.clear();
    a.set_cursor_position(35,14);
    assert_eq!(a.text(),"\x1b[15;36H");
    a.clear();
    a.set_cursor_position(-2,-3);
    assert_eq!(a.text(),"\x1b[-2;-1H");
}