#[repr(u8)]
#[derive(Copy, Clone, PartialEq)]
pub(crate) enum Color {
    Black = 0,
    DarkBlue = 1,
    DarkGreen = 2,
    Teal = 3,
    DarkRed = 4,
    Magenta = 5,
    Olive = 6,
    Silver = 7,
    Gray = 8,
    Blue = 9,
    Green = 10,
    Aqua = 11,
    Red = 12,
    Pink = 13,
    Yellow = 14,
    White = 15,
    Transparent = 16,
}

static HASH_TO_ALIGNAMENT: [Option<Color>; 121] = [
    None,
    None,
    None,
    Some(Color::DarkRed),
    None,
    None,
    None,
    Some(Color::Pink),
    None,
    None,
    None,
    None,
    None,
    Some(Color::Silver),
    None,
    None,
    Some(Color::Gray),
    None,
    None,
    None,
    Some(Color::DarkBlue),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Color::DarkGreen),
    Some(Color::White),
    None,
    None,
    Some(Color::Green),
    None,
    Some(Color::DarkBlue),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Color::Aqua),
    Some(Color::Red),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Color::Olive),
    Some(Color::DarkRed),
    Some(Color::DarkGreen),
    Some(Color::Transparent),
    Some(Color::Yellow),
    None,
    Some(Color::Teal),
    None,
    None,
    Some(Color::Green),
    Some(Color::Black),
    Some(Color::Blue),
    Some(Color::Gray),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Color::Blue),
    None,
    None,
    None,
    Some(Color::Pink),
    None,
    None,
    Some(Color::Magenta),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Color::Silver),
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Color::Aqua),
    Some(Color::Red),
    None,
    None,
    Some(Color::Yellow),
    None,
    Some(Color::White),
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    None,
    Some(Color::Transparent),
    None,
    None,
    None,
    None,
    None,
];

static HASH_COLISION_VALIDATOR: [u64; 121] = [
    0x0,
    0x0,
    0x0,
    0x9489A9902E6C5BDC,
    0x0,
    0x0,
    0x0,
    0xBF30EC0DC5331C0D,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0xDB7D47CB10B772A0,
    0x0,
    0x0,
    0xFB6FAA7243F4459A,
    0x0,
    0x0,
    0x0,
    0x8914E07B53BA1E3,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0xDFB890FA554DCD7C,
    0xAF63EA4C86020456,
    0x0,
    0x0,
    0xF40F029637FECBC,
    0x0,
    0xA1A82D75FD18630D,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0xAF63DC4C8601EC8C,
    0xAF63EF4C86020CD5,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x73D4BFA38E3F676C,
    0x8913E07B53B86B3,
    0x8915107B53BA6FC,
    0xBDBDA3148488BB71,
    0xAF63F44C86021554,
    0x0,
    0xFA23DAEF19AFC4DF,
    0x0,
    0x0,
    0xAF63DA4C8601E926,
    0x4B5DD0ABBC6FC1E4,
    0xC5CCD29BC2DDA64D,
    0xC2BAF07707477137,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0xAF63DF4C8601F1A5,
    0x0,
    0x0,
    0x0,
    0xCBF29CE484222325,
    0x0,
    0x0,
    0x6C90E772EDBC8708,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0xC2B3DF77074135A6,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x7E2F198437C28B35,
    0x89E9BE1960F4C21C,
    0x0,
    0x0,
    0x8346A574925E75A9,
    0x0,
    0xCED973885856E206,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
    0xEB0A3EBE378076F0,
    0x0,
    0x0,
    0x0,
    0x0,
    0x0,
];

impl Color {
    pub(super) fn from_hash(hash: u64) -> Option<Color> {
        let entry_index = (hash % 121) as usize;
        if HASH_COLISION_VALIDATOR[entry_index] != hash {
            return None;
        }
        return HASH_TO_ALIGNAMENT[entry_index];
    }
    pub fn get_name(&self) -> &'static str {
        match self {
            Color::Black => "Black",
            Color::DarkBlue => "DarkBlue",
            Color::DarkGreen => "DarkGreen",
            Color::Teal => "Teal",
            Color::DarkRed => "DarkRed",
            Color::Magenta => "Magenta",
            Color::Olive => "Olive",
            Color::Silver => "Silver",
            Color::Gray => "Gray",
            Color::Blue => "Blue",
            Color::Green => "Green",
            Color::Aqua => "Aqua",
            Color::Red => "Red",
            Color::Pink => "Pink",
            Color::Yellow => "Yellow",
            Color::White => "White",
            Color::Transparent => "Transparent",
        }
    }
}
